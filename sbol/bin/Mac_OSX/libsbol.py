# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.5
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsbol', [dirname(__file__)])
        except ImportError:
            import _libsbol
            return _libsbol
        if fp is not None:
            try:
                _mod = imp.load_module('_libsbol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsbol = swig_import_helper()
    del swig_import_helper
else:
    import _libsbol
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_libsbol.STRAND_FORWARD_swigconstant(_libsbol)
STRAND_FORWARD = _libsbol.STRAND_FORWARD

_libsbol.STRAND_BIDIRECTIONAL_swigconstant(_libsbol)
STRAND_BIDIRECTIONAL = _libsbol.STRAND_BIDIRECTIONAL

_libsbol.STRAND_REVERSE_swigconstant(_libsbol)
STRAND_REVERSE = _libsbol.STRAND_REVERSE

def createDocument():
    return _libsbol.createDocument()
createDocument = _libsbol.createDocument

def createDNASequence(doc, uri):
    return _libsbol.createDNASequence(doc, uri)
createDNASequence = _libsbol.createDNASequence

def createDNAComponent(doc, uri):
    return _libsbol.createDNAComponent(doc, uri)
createDNAComponent = _libsbol.createDNAComponent

def createCollection(doc, uri):
    return _libsbol.createCollection(doc, uri)
createCollection = _libsbol.createCollection

def createSequenceAnnotation(doc, uri):
    return _libsbol.createSequenceAnnotation(doc, uri)
createSequenceAnnotation = _libsbol.createSequenceAnnotation

def copyDNAComponent(com, id_modifier):
    return _libsbol.copyDNAComponent(com, id_modifier)
copyDNAComponent = _libsbol.copyDNAComponent

def copyDNASequence(seq, id_modifier):
    return _libsbol.copyDNASequence(seq, id_modifier)
copyDNASequence = _libsbol.copyDNASequence

def copySequenceAnnotation(ann, id_modifier):
    return _libsbol.copySequenceAnnotation(ann, id_modifier)
copySequenceAnnotation = _libsbol.copySequenceAnnotation

def deleteDocument(doc):
    return _libsbol.deleteDocument(doc)
deleteDocument = _libsbol.deleteDocument

def deleteDNASequence(seq):
    return _libsbol.deleteDNASequence(seq)
deleteDNASequence = _libsbol.deleteDNASequence

def deleteSequenceAnnotation(ann):
    return _libsbol.deleteSequenceAnnotation(ann)
deleteSequenceAnnotation = _libsbol.deleteSequenceAnnotation

def deleteDNAComponent(com):
    return _libsbol.deleteDNAComponent(com)
deleteDNAComponent = _libsbol.deleteDNAComponent

def deleteCollection(col):
    return _libsbol.deleteCollection(col)
deleteCollection = _libsbol.deleteCollection

def removeDNASequence(doc, seq):
    return _libsbol.removeDNASequence(doc, seq)
removeDNASequence = _libsbol.removeDNASequence

def removeSequenceAnnotation(doc, ann):
    return _libsbol.removeSequenceAnnotation(doc, ann)
removeSequenceAnnotation = _libsbol.removeSequenceAnnotation

def removeDNAComponent(doc, com):
    return _libsbol.removeDNAComponent(doc, com)
removeDNAComponent = _libsbol.removeDNAComponent

def removeCollection(doc, col):
    return _libsbol.removeCollection(doc, col)
removeCollection = _libsbol.removeCollection

def getDNASequenceNucleotides(seq):
    return _libsbol.getDNASequenceNucleotides(seq)
getDNASequenceNucleotides = _libsbol.getDNASequenceNucleotides

def getDNASequenceURI(seq):
    return _libsbol.getDNASequenceURI(seq)
getDNASequenceURI = _libsbol.getDNASequenceURI

def getSequenceAnnotationURI(ann):
    return _libsbol.getSequenceAnnotationURI(ann)
getSequenceAnnotationURI = _libsbol.getSequenceAnnotationURI

def getDNAComponentURI(com):
    return _libsbol.getDNAComponentURI(com)
getDNAComponentURI = _libsbol.getDNAComponentURI

def getDNAComponentDisplayID(com):
    return _libsbol.getDNAComponentDisplayID(com)
getDNAComponentDisplayID = _libsbol.getDNAComponentDisplayID

def getDNAComponentName(com):
    return _libsbol.getDNAComponentName(com)
getDNAComponentName = _libsbol.getDNAComponentName

def getDNAComponentDescription(com):
    return _libsbol.getDNAComponentDescription(com)
getDNAComponentDescription = _libsbol.getDNAComponentDescription

def getDNAComponentType(com):
    return _libsbol.getDNAComponentType(com)
getDNAComponentType = _libsbol.getDNAComponentType

def getCollectionURI(col):
    return _libsbol.getCollectionURI(col)
getCollectionURI = _libsbol.getCollectionURI

def getCollectionDisplayID(col):
    return _libsbol.getCollectionDisplayID(col)
getCollectionDisplayID = _libsbol.getCollectionDisplayID

def getCollectionName(col):
    return _libsbol.getCollectionName(col)
getCollectionName = _libsbol.getCollectionName

def getCollectionDescription(col):
    return _libsbol.getCollectionDescription(col)
getCollectionDescription = _libsbol.getCollectionDescription

def writeDocumentToString(doc):
    return _libsbol.writeDocumentToString(doc)
writeDocumentToString = _libsbol.writeDocumentToString

def getDNASequence(doc, uri):
    return _libsbol.getDNASequence(doc, uri)
getDNASequence = _libsbol.getDNASequence

def getNthDNASequence(doc, n):
    return _libsbol.getNthDNASequence(doc, n)
getNthDNASequence = _libsbol.getNthDNASequence

def getDNAComponentSequence(com):
    return _libsbol.getDNAComponentSequence(com)
getDNAComponentSequence = _libsbol.getDNAComponentSequence

def getSequenceAnnotation(doc, uri):
    return _libsbol.getSequenceAnnotation(doc, uri)
getSequenceAnnotation = _libsbol.getSequenceAnnotation

def getNthSequenceAnnotation(doc, n):
    return _libsbol.getNthSequenceAnnotation(doc, n)
getNthSequenceAnnotation = _libsbol.getNthSequenceAnnotation

def getNthPrecedes(ann, n):
    return _libsbol.getNthPrecedes(ann, n)
getNthPrecedes = _libsbol.getNthPrecedes

def getNthSequenceAnnotationFor(com, n):
    return _libsbol.getNthSequenceAnnotationFor(com, n)
getNthSequenceAnnotationFor = _libsbol.getNthSequenceAnnotationFor

def getNthDNAComponent(doc, n):
    return _libsbol.getNthDNAComponent(doc, n)
getNthDNAComponent = _libsbol.getNthDNAComponent

def getDNAComponent(doc, uri):
    return _libsbol.getDNAComponent(doc, uri)
getDNAComponent = _libsbol.getDNAComponent

def getSequenceAnnotationSubComponent(ann):
    return _libsbol.getSequenceAnnotationSubComponent(ann)
getSequenceAnnotationSubComponent = _libsbol.getSequenceAnnotationSubComponent

def getNthDNAComponentIn(col, n):
    return _libsbol.getNthDNAComponentIn(col, n)
getNthDNAComponentIn = _libsbol.getNthDNAComponentIn

def getCollection(doc, uri):
    return _libsbol.getCollection(doc, uri)
getCollection = _libsbol.getCollection

def getNthCollection(doc, n):
    return _libsbol.getNthCollection(doc, n)
getNthCollection = _libsbol.getNthCollection

def getNumSBOLObjects(doc):
    return _libsbol.getNumSBOLObjects(doc)
getNumSBOLObjects = _libsbol.getNumSBOLObjects

def isSBOLObjectURI(doc, uri):
    return _libsbol.isSBOLObjectURI(doc, uri)
isSBOLObjectURI = _libsbol.isSBOLObjectURI

def getNumDNASequences(doc):
    return _libsbol.getNumDNASequences(doc)
getNumDNASequences = _libsbol.getNumDNASequences

def isDNASequenceURI(doc, uri):
    return _libsbol.isDNASequenceURI(doc, uri)
isDNASequenceURI = _libsbol.isDNASequenceURI

def isSequenceAnnotation(doc, pointer):
    return _libsbol.isSequenceAnnotation(doc, pointer)
isSequenceAnnotation = _libsbol.isSequenceAnnotation

def isSequenceAnnotationURI(doc, uri):
    return _libsbol.isSequenceAnnotationURI(doc, uri)
isSequenceAnnotationURI = _libsbol.isSequenceAnnotationURI

def getNumSequenceAnnotations(doc):
    return _libsbol.getNumSequenceAnnotations(doc)
getNumSequenceAnnotations = _libsbol.getNumSequenceAnnotations

def getSequenceAnnotationStart(ann):
    return _libsbol.getSequenceAnnotationStart(ann)
getSequenceAnnotationStart = _libsbol.getSequenceAnnotationStart

def getSequenceAnnotationEnd(ann):
    return _libsbol.getSequenceAnnotationEnd(ann)
getSequenceAnnotationEnd = _libsbol.getSequenceAnnotationEnd

def getSequenceAnnotationStrand(ann):
    return _libsbol.getSequenceAnnotationStrand(ann)
getSequenceAnnotationStrand = _libsbol.getSequenceAnnotationStrand

def getNumPrecedes(ann):
    return _libsbol.getNumPrecedes(ann)
getNumPrecedes = _libsbol.getNumPrecedes

def precedes(upstream, downstream):
    return _libsbol.precedes(upstream, downstream)
precedes = _libsbol.precedes

def isDNAComponent(doc, pointer):
    return _libsbol.isDNAComponent(doc, pointer)
isDNAComponent = _libsbol.isDNAComponent

def isDNAComponentURI(doc, uri):
    return _libsbol.isDNAComponentURI(doc, uri)
isDNAComponentURI = _libsbol.isDNAComponentURI

def getNumDNAComponents(doc):
    return _libsbol.getNumDNAComponents(doc)
getNumDNAComponents = _libsbol.getNumDNAComponents

def getNumSequenceAnnotationsFor(com):
    return _libsbol.getNumSequenceAnnotationsFor(com)
getNumSequenceAnnotationsFor = _libsbol.getNumSequenceAnnotationsFor

def isCollection(doc, pointer):
    return _libsbol.isCollection(doc, pointer)
isCollection = _libsbol.isCollection

def isCollectionURI(doc, uri):
    return _libsbol.isCollectionURI(doc, uri)
isCollectionURI = _libsbol.isCollectionURI

def getNumCollections(doc):
    return _libsbol.getNumCollections(doc)
getNumCollections = _libsbol.getNumCollections

def getNumDNAComponentsIn(col):
    return _libsbol.getNumDNAComponentsIn(col)
getNumDNAComponentsIn = _libsbol.getNumDNAComponentsIn

def dnaComponentInCollection(com, col):
    return _libsbol.dnaComponentInCollection(com, col)
dnaComponentInCollection = _libsbol.dnaComponentInCollection

def writeDocumentToFile(doc, filename):
    return _libsbol.writeDocumentToFile(doc, filename)
writeDocumentToFile = _libsbol.writeDocumentToFile

def setDNASequenceNucleotides(seq, nucleotides):
    return _libsbol.setDNASequenceNucleotides(seq, nucleotides)
setDNASequenceNucleotides = _libsbol.setDNASequenceNucleotides

def printDNASequence(seq, tabs):
    return _libsbol.printDNASequence(seq, tabs)
printDNASequence = _libsbol.printDNASequence

def setSequenceAnnotationStart(ann, start):
    return _libsbol.setSequenceAnnotationStart(ann, start)
setSequenceAnnotationStart = _libsbol.setSequenceAnnotationStart

def setSequenceAnnotationEnd(ann, end):
    return _libsbol.setSequenceAnnotationEnd(ann, end)
setSequenceAnnotationEnd = _libsbol.setSequenceAnnotationEnd

def setSequenceAnnotationStrand(ann, polarity):
    return _libsbol.setSequenceAnnotationStrand(ann, polarity)
setSequenceAnnotationStrand = _libsbol.setSequenceAnnotationStrand

def addPrecedesRelationship(upstream, downstream):
    return _libsbol.addPrecedesRelationship(upstream, downstream)
addPrecedesRelationship = _libsbol.addPrecedesRelationship

def removePrecedesRelationship(upstream, downstream):
    return _libsbol.removePrecedesRelationship(upstream, downstream)
removePrecedesRelationship = _libsbol.removePrecedesRelationship

def printSequenceAnnotation(seq, tabs):
    return _libsbol.printSequenceAnnotation(seq, tabs)
printSequenceAnnotation = _libsbol.printSequenceAnnotation

def setDNAComponentURI(com, uri):
    return _libsbol.setDNAComponentURI(com, uri)
setDNAComponentURI = _libsbol.setDNAComponentURI

def setDNAComponentDisplayID(com, id):
    return _libsbol.setDNAComponentDisplayID(com, id)
setDNAComponentDisplayID = _libsbol.setDNAComponentDisplayID

def setDNAComponentName(com, name):
    return _libsbol.setDNAComponentName(com, name)
setDNAComponentName = _libsbol.setDNAComponentName

def setDNAComponentDescription(com, desc):
    return _libsbol.setDNAComponentDescription(com, desc)
setDNAComponentDescription = _libsbol.setDNAComponentDescription

def setDNAComponentSequence(com, seq):
    return _libsbol.setDNAComponentSequence(com, seq)
setDNAComponentSequence = _libsbol.setDNAComponentSequence

def setDNAComponentType(com, uri):
    return _libsbol.setDNAComponentType(com, uri)
setDNAComponentType = _libsbol.setDNAComponentType

def addSequenceAnnotation(com, ann):
    return _libsbol.addSequenceAnnotation(com, ann)
addSequenceAnnotation = _libsbol.addSequenceAnnotation

def removeSequenceAnnotationFromDNAComponent(com, ann):
    return _libsbol.removeSequenceAnnotationFromDNAComponent(com, ann)
removeSequenceAnnotationFromDNAComponent = _libsbol.removeSequenceAnnotationFromDNAComponent

def setSequenceAnnotationSubComponent(ann, com):
    return _libsbol.setSequenceAnnotationSubComponent(ann, com)
setSequenceAnnotationSubComponent = _libsbol.setSequenceAnnotationSubComponent

def printDNAComponent(com, tabs):
    return _libsbol.printDNAComponent(com, tabs)
printDNAComponent = _libsbol.printDNAComponent

def setCollectionDisplayID(col, id):
    return _libsbol.setCollectionDisplayID(col, id)
setCollectionDisplayID = _libsbol.setCollectionDisplayID

def setCollectionName(col, name):
    return _libsbol.setCollectionName(col, name)
setCollectionName = _libsbol.setCollectionName

def setCollectionDescription(col, desc):
    return _libsbol.setCollectionDescription(col, desc)
setCollectionDescription = _libsbol.setCollectionDescription

def addDNAComponentToCollection(col, com):
    return _libsbol.addDNAComponentToCollection(col, com)
addDNAComponentToCollection = _libsbol.addDNAComponentToCollection

def removeDNAComponentFromCollection(col, com):
    return _libsbol.removeDNAComponentFromCollection(col, com)
removeDNAComponentFromCollection = _libsbol.removeDNAComponentFromCollection

def printCollection(col, tabs):
    return _libsbol.printCollection(col, tabs)
printCollection = _libsbol.printCollection

def readDocument(doc, filename):
    return _libsbol.readDocument(doc, filename)
readDocument = _libsbol.readDocument

def printDocument(doc):
    return _libsbol.printDocument(doc)
printDocument = _libsbol.printDocument
# This file is compatible with both classic and new-style classes.


