# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libsbol', [dirname(__file__)])
        except ImportError:
            import _libsbol
            return _libsbol
        if fp is not None:
            try:
                _mod = imp.load_module('_libsbol', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libsbol = swig_import_helper()
    del swig_import_helper
else:
    import _libsbol
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


STRAND_FORWARD = _libsbol.STRAND_FORWARD
STRAND_BIDIRECTIONAL = _libsbol.STRAND_BIDIRECTIONAL
STRAND_REVERSE = _libsbol.STRAND_REVERSE

def createDocument():
  return _libsbol.createDocument()
createDocument = _libsbol.createDocument

def createDNASequence(*args):
  return _libsbol.createDNASequence(*args)
createDNASequence = _libsbol.createDNASequence

def createDNAComponent(*args):
  return _libsbol.createDNAComponent(*args)
createDNAComponent = _libsbol.createDNAComponent

def createCollection(*args):
  return _libsbol.createCollection(*args)
createCollection = _libsbol.createCollection

def createSequenceAnnotation(*args):
  return _libsbol.createSequenceAnnotation(*args)
createSequenceAnnotation = _libsbol.createSequenceAnnotation

def copyDNAComponent(*args):
  return _libsbol.copyDNAComponent(*args)
copyDNAComponent = _libsbol.copyDNAComponent

def copyDNASequence(*args):
  return _libsbol.copyDNASequence(*args)
copyDNASequence = _libsbol.copyDNASequence

def copySequenceAnnotation(*args):
  return _libsbol.copySequenceAnnotation(*args)
copySequenceAnnotation = _libsbol.copySequenceAnnotation

def deleteDocument(*args):
  return _libsbol.deleteDocument(*args)
deleteDocument = _libsbol.deleteDocument

def deleteDNASequence(*args):
  return _libsbol.deleteDNASequence(*args)
deleteDNASequence = _libsbol.deleteDNASequence

def deleteSequenceAnnotation(*args):
  return _libsbol.deleteSequenceAnnotation(*args)
deleteSequenceAnnotation = _libsbol.deleteSequenceAnnotation

def deleteDNAComponent(*args):
  return _libsbol.deleteDNAComponent(*args)
deleteDNAComponent = _libsbol.deleteDNAComponent

def deleteCollection(*args):
  return _libsbol.deleteCollection(*args)
deleteCollection = _libsbol.deleteCollection

def removeDNASequence(*args):
  return _libsbol.removeDNASequence(*args)
removeDNASequence = _libsbol.removeDNASequence

def removeSequenceAnnotation(*args):
  return _libsbol.removeSequenceAnnotation(*args)
removeSequenceAnnotation = _libsbol.removeSequenceAnnotation

def removeDNAComponent(*args):
  return _libsbol.removeDNAComponent(*args)
removeDNAComponent = _libsbol.removeDNAComponent

def removeCollection(*args):
  return _libsbol.removeCollection(*args)
removeCollection = _libsbol.removeCollection

def getDNASequenceNucleotides(*args):
  return _libsbol.getDNASequenceNucleotides(*args)
getDNASequenceNucleotides = _libsbol.getDNASequenceNucleotides

def getDNASequenceURI(*args):
  return _libsbol.getDNASequenceURI(*args)
getDNASequenceURI = _libsbol.getDNASequenceURI

def getSequenceAnnotationURI(*args):
  return _libsbol.getSequenceAnnotationURI(*args)
getSequenceAnnotationURI = _libsbol.getSequenceAnnotationURI

def getDNAComponentURI(*args):
  return _libsbol.getDNAComponentURI(*args)
getDNAComponentURI = _libsbol.getDNAComponentURI

def getDNAComponentDisplayID(*args):
  return _libsbol.getDNAComponentDisplayID(*args)
getDNAComponentDisplayID = _libsbol.getDNAComponentDisplayID

def getDNAComponentName(*args):
  return _libsbol.getDNAComponentName(*args)
getDNAComponentName = _libsbol.getDNAComponentName

def getDNAComponentDescription(*args):
  return _libsbol.getDNAComponentDescription(*args)
getDNAComponentDescription = _libsbol.getDNAComponentDescription

def getDNAComponentType(*args):
  return _libsbol.getDNAComponentType(*args)
getDNAComponentType = _libsbol.getDNAComponentType

def getCollectionURI(*args):
  return _libsbol.getCollectionURI(*args)
getCollectionURI = _libsbol.getCollectionURI

def getCollectionDisplayID(*args):
  return _libsbol.getCollectionDisplayID(*args)
getCollectionDisplayID = _libsbol.getCollectionDisplayID

def getCollectionName(*args):
  return _libsbol.getCollectionName(*args)
getCollectionName = _libsbol.getCollectionName

def getCollectionDescription(*args):
  return _libsbol.getCollectionDescription(*args)
getCollectionDescription = _libsbol.getCollectionDescription

def writeDocumentToString(*args):
  return _libsbol.writeDocumentToString(*args)
writeDocumentToString = _libsbol.writeDocumentToString

def getDNASequence(*args):
  return _libsbol.getDNASequence(*args)
getDNASequence = _libsbol.getDNASequence

def getNthDNASequence(*args):
  return _libsbol.getNthDNASequence(*args)
getNthDNASequence = _libsbol.getNthDNASequence

def getDNAComponentSequence(*args):
  return _libsbol.getDNAComponentSequence(*args)
getDNAComponentSequence = _libsbol.getDNAComponentSequence

def getSequenceAnnotation(*args):
  return _libsbol.getSequenceAnnotation(*args)
getSequenceAnnotation = _libsbol.getSequenceAnnotation

def getNthSequenceAnnotation(*args):
  return _libsbol.getNthSequenceAnnotation(*args)
getNthSequenceAnnotation = _libsbol.getNthSequenceAnnotation

def getNthPrecedes(*args):
  return _libsbol.getNthPrecedes(*args)
getNthPrecedes = _libsbol.getNthPrecedes

def getNthSequenceAnnotationFor(*args):
  return _libsbol.getNthSequenceAnnotationFor(*args)
getNthSequenceAnnotationFor = _libsbol.getNthSequenceAnnotationFor

def getNthDNAComponent(*args):
  return _libsbol.getNthDNAComponent(*args)
getNthDNAComponent = _libsbol.getNthDNAComponent

def getDNAComponent(*args):
  return _libsbol.getDNAComponent(*args)
getDNAComponent = _libsbol.getDNAComponent

def getSequenceAnnotationSubComponent(*args):
  return _libsbol.getSequenceAnnotationSubComponent(*args)
getSequenceAnnotationSubComponent = _libsbol.getSequenceAnnotationSubComponent

def getNthDNAComponentIn(*args):
  return _libsbol.getNthDNAComponentIn(*args)
getNthDNAComponentIn = _libsbol.getNthDNAComponentIn

def getCollection(*args):
  return _libsbol.getCollection(*args)
getCollection = _libsbol.getCollection

def getNthCollection(*args):
  return _libsbol.getNthCollection(*args)
getNthCollection = _libsbol.getNthCollection

def getNumSBOLObjects(*args):
  return _libsbol.getNumSBOLObjects(*args)
getNumSBOLObjects = _libsbol.getNumSBOLObjects

def isSBOLObjectURI(*args):
  return _libsbol.isSBOLObjectURI(*args)
isSBOLObjectURI = _libsbol.isSBOLObjectURI

def getNumDNASequences(*args):
  return _libsbol.getNumDNASequences(*args)
getNumDNASequences = _libsbol.getNumDNASequences

def isDNASequenceURI(*args):
  return _libsbol.isDNASequenceURI(*args)
isDNASequenceURI = _libsbol.isDNASequenceURI

def isSequenceAnnotation(*args):
  return _libsbol.isSequenceAnnotation(*args)
isSequenceAnnotation = _libsbol.isSequenceAnnotation

def isSequenceAnnotationURI(*args):
  return _libsbol.isSequenceAnnotationURI(*args)
isSequenceAnnotationURI = _libsbol.isSequenceAnnotationURI

def getNumSequenceAnnotations(*args):
  return _libsbol.getNumSequenceAnnotations(*args)
getNumSequenceAnnotations = _libsbol.getNumSequenceAnnotations

def getSequenceAnnotationStart(*args):
  return _libsbol.getSequenceAnnotationStart(*args)
getSequenceAnnotationStart = _libsbol.getSequenceAnnotationStart

def getSequenceAnnotationEnd(*args):
  return _libsbol.getSequenceAnnotationEnd(*args)
getSequenceAnnotationEnd = _libsbol.getSequenceAnnotationEnd

def getSequenceAnnotationStrand(*args):
  return _libsbol.getSequenceAnnotationStrand(*args)
getSequenceAnnotationStrand = _libsbol.getSequenceAnnotationStrand

def getNumPrecedes(*args):
  return _libsbol.getNumPrecedes(*args)
getNumPrecedes = _libsbol.getNumPrecedes

def precedes(*args):
  return _libsbol.precedes(*args)
precedes = _libsbol.precedes

def isDNAComponent(*args):
  return _libsbol.isDNAComponent(*args)
isDNAComponent = _libsbol.isDNAComponent

def isDNAComponentURI(*args):
  return _libsbol.isDNAComponentURI(*args)
isDNAComponentURI = _libsbol.isDNAComponentURI

def getNumDNAComponents(*args):
  return _libsbol.getNumDNAComponents(*args)
getNumDNAComponents = _libsbol.getNumDNAComponents

def getNumSequenceAnnotationsFor(*args):
  return _libsbol.getNumSequenceAnnotationsFor(*args)
getNumSequenceAnnotationsFor = _libsbol.getNumSequenceAnnotationsFor

def isCollection(*args):
  return _libsbol.isCollection(*args)
isCollection = _libsbol.isCollection

def isCollectionURI(*args):
  return _libsbol.isCollectionURI(*args)
isCollectionURI = _libsbol.isCollectionURI

def getNumCollections(*args):
  return _libsbol.getNumCollections(*args)
getNumCollections = _libsbol.getNumCollections

def getNumDNAComponentsIn(*args):
  return _libsbol.getNumDNAComponentsIn(*args)
getNumDNAComponentsIn = _libsbol.getNumDNAComponentsIn

def dnaComponentInCollection(*args):
  return _libsbol.dnaComponentInCollection(*args)
dnaComponentInCollection = _libsbol.dnaComponentInCollection

def writeDocumentToFile(*args):
  return _libsbol.writeDocumentToFile(*args)
writeDocumentToFile = _libsbol.writeDocumentToFile

def setDNASequenceNucleotides(*args):
  return _libsbol.setDNASequenceNucleotides(*args)
setDNASequenceNucleotides = _libsbol.setDNASequenceNucleotides

def printDNASequence(*args):
  return _libsbol.printDNASequence(*args)
printDNASequence = _libsbol.printDNASequence

def setSequenceAnnotationStart(*args):
  return _libsbol.setSequenceAnnotationStart(*args)
setSequenceAnnotationStart = _libsbol.setSequenceAnnotationStart

def setSequenceAnnotationEnd(*args):
  return _libsbol.setSequenceAnnotationEnd(*args)
setSequenceAnnotationEnd = _libsbol.setSequenceAnnotationEnd

def setSequenceAnnotationStrand(*args):
  return _libsbol.setSequenceAnnotationStrand(*args)
setSequenceAnnotationStrand = _libsbol.setSequenceAnnotationStrand

def addPrecedesRelationship(*args):
  return _libsbol.addPrecedesRelationship(*args)
addPrecedesRelationship = _libsbol.addPrecedesRelationship

def removePrecedesRelationship(*args):
  return _libsbol.removePrecedesRelationship(*args)
removePrecedesRelationship = _libsbol.removePrecedesRelationship

def printSequenceAnnotation(*args):
  return _libsbol.printSequenceAnnotation(*args)
printSequenceAnnotation = _libsbol.printSequenceAnnotation

def setDNAComponentURI(*args):
  return _libsbol.setDNAComponentURI(*args)
setDNAComponentURI = _libsbol.setDNAComponentURI

def setDNAComponentDisplayID(*args):
  return _libsbol.setDNAComponentDisplayID(*args)
setDNAComponentDisplayID = _libsbol.setDNAComponentDisplayID

def setDNAComponentName(*args):
  return _libsbol.setDNAComponentName(*args)
setDNAComponentName = _libsbol.setDNAComponentName

def setDNAComponentDescription(*args):
  return _libsbol.setDNAComponentDescription(*args)
setDNAComponentDescription = _libsbol.setDNAComponentDescription

def setDNAComponentSequence(*args):
  return _libsbol.setDNAComponentSequence(*args)
setDNAComponentSequence = _libsbol.setDNAComponentSequence

def setDNAComponentType(*args):
  return _libsbol.setDNAComponentType(*args)
setDNAComponentType = _libsbol.setDNAComponentType

def addSequenceAnnotation(*args):
  return _libsbol.addSequenceAnnotation(*args)
addSequenceAnnotation = _libsbol.addSequenceAnnotation

def removeSequenceAnnotationFromDNAComponent(*args):
  return _libsbol.removeSequenceAnnotationFromDNAComponent(*args)
removeSequenceAnnotationFromDNAComponent = _libsbol.removeSequenceAnnotationFromDNAComponent

def setSequenceAnnotationSubComponent(*args):
  return _libsbol.setSequenceAnnotationSubComponent(*args)
setSequenceAnnotationSubComponent = _libsbol.setSequenceAnnotationSubComponent

def printDNAComponent(*args):
  return _libsbol.printDNAComponent(*args)
printDNAComponent = _libsbol.printDNAComponent

def setCollectionDisplayID(*args):
  return _libsbol.setCollectionDisplayID(*args)
setCollectionDisplayID = _libsbol.setCollectionDisplayID

def setCollectionName(*args):
  return _libsbol.setCollectionName(*args)
setCollectionName = _libsbol.setCollectionName

def setCollectionDescription(*args):
  return _libsbol.setCollectionDescription(*args)
setCollectionDescription = _libsbol.setCollectionDescription

def addDNAComponentToCollection(*args):
  return _libsbol.addDNAComponentToCollection(*args)
addDNAComponentToCollection = _libsbol.addDNAComponentToCollection

def removeDNAComponentFromCollection(*args):
  return _libsbol.removeDNAComponentFromCollection(*args)
removeDNAComponentFromCollection = _libsbol.removeDNAComponentFromCollection

def printCollection(*args):
  return _libsbol.printCollection(*args)
printCollection = _libsbol.printCollection

def readDocument(*args):
  return _libsbol.readDocument(*args)
readDocument = _libsbol.readDocument

def printDocument(*args):
  return _libsbol.printDocument(*args)
printDocument = _libsbol.printDocument

def moveDNAComponent(*args):
  return _libsbol.moveDNAComponent(*args)
moveDNAComponent = _libsbol.moveDNAComponent
# This file is compatible with both classic and new-style classes.


